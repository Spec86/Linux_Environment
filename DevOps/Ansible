Установка Ansible с использованием pipx.
pipx позволяет устанавливать Python-приложения в изолированные виртуальные окружения с доступом через глобальные команды.

1. Обновите список пакетов:
$ sudo apt update && sudo apt upgrade -y

2. Проверьте установленную версию Python и pip:
$ python3 --version
$ pip3 --version

3. При отсутствии установите необходимые зависимости: Ansible требует Python версии 3.8 или выше.
$ sudo apt install -y python3 python3-pip python3-venv python3-wheel

4. Установите pipx:
$ python3 -m pip install --user pipx
$ python3 -m pipx ensurepath

5. Установите Ansible через pipx:
$ pipx install ansible

6. Проверьте установку:
$ ansible --version


Примечания:
флаг --user не нужно менять на ваше имя.
Флаг --user в команде означает, что пакет будет установлен только для текущего пользователя, а не глобально для всей системы.
Это упрощает установку, не требуя прав суперпользователя (sudo), и сохраняет установленные файлы в директории ~/.local.
Пакет pipx будет установлен в директорию ~/.local/lib/python3.x/site-packages/.
Исполняемые файлы pipx (и других утилит, установленных через него) окажутся в ~/.local/bin/.


Убедитесь, что ~/.local/bin добавлен в ваш PATH:
$ echo $PATH
Если ~/.local/bin отсутствует, добавьте его в файл ~/.bashrc или ~/.zshrc.
Откройте файл ~/.bashrc (или ~/.zshrc, если используете Zsh):
$ nano ~/.bashrc
Добавьте строку:
export PATH=$PATH:~/.local/bin

Примените изменения:
$ source ~/.bashrc

Теперь команда pipx будет доступна из вашего терминала. После этого вы можете использовать pipx для установки и управления приложениями, например:
pipx install ansible


Настройка Ansible (опционально)

1. Создайте директорию для файлов конфигурации:
$ mkdir -p ~/ansible/playbooks
2. При необходимости, создайте файл конфигурации ansible.cfg:
$ nano ~/ansible/ansible.cfg

Пример минимальной конфигурации:
[defaults]
inventory = ~/ansible/hosts
host_key_checking = False
retry_files_enabled = False

3. Создайте файл hosts для инвентаря:
$ nano ~/ansible/hosts
Пример содержимого:
[local]
localhost ansible_connection=local
[ubuntu_server]
your_server_ip ansible_user=your_user ansible_ssh_private_key_file=~/.ssh/your_private_key ansible_port=22

Теперь вы готовы использовать Ansible! 🎉


Для подключения к удалённому Ubuntu Server в облаке с помощью Ansible потребуется указать параметры доступа, такие как IP-адрес сервера, имя пользователя и способ аутентификации (обычно SSH).
Пример строки в инвентарном файле для удалённого сервера:
[ubuntu_server]
your_server_ip ansible_user=your_user ansible_ssh_private_key_file=~/.ssh/your_private_key ansible_port=22

Параметры:

    your_server_ip — публичный IP-адрес вашего облачного сервера.
    ansible_user — имя пользователя для подключения (например, ubuntu для серверов Ubuntu, созданных через большинство облачных провайдеров).
    ansible_ssh_private_key_file — путь к вашему приватному SSH-ключу, который используется для аутентификации.
    ansible_port — порт для SSH (по умолчанию 22, но может быть изменён в настройках сервера).

Если сервер использует пароль для SSH:
Если вы хотите использовать пароль вместо ключа (не рекомендуется для безопасности), можно указать:
192.168.1.100 ansible_user=your_user ansible_ssh_pass=your_password ansible_port=22
Но использование пароля небезопасно; лучше настроить ключи SSH.

Пример полного инвентарного файла
[local]
localhost ansible_connection=local

[cloud_servers]
192.168.1.100 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/aws-key.pem ansible_port=22
192.168.1.101 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/aws-key.pem ansible_port=22

Тест подключения
Для проверки подключения выполните:
$ ansible -i ~/ansible/hosts ubuntu_server -m ping

-i ~/ansible/hosts — путь к вашему инвентарному файлу.
ubuntu_server — группа или конкретный хост из файла.
-m ping — модуль для проверки связи.

Если всё настроено правильно, вы увидите результат типа:
192.168.1.100 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}



